---
- hosts: localhost
  tasks:
  - name: 'is create Azure Resource?'
    shell: azure group list | grep -w {{ rgName }}
    register: check_resource
    ignore_errors: yes

  - name: 'Create Azure Resource'
    shell: azure group create {{ rgName }} {{ location }}
    when: check_resource.rc != 0

  - name: 'is create Azure Network?'
    shell: azure network vnet list {{ rgName }} | grep {{ rgName }}
    register: check_network
    ignore_errors: yes

  - name: 'Create the Network Resource'
    shell: >
      azure network vnet create --resource-group {{ rgName }} 
      --name {{ rgName }} --address-prefixes {{ vnetPrefix }} 
      --location {{ location }}
    when: check_network.rc != 0

  - name: 'is create the Azure Subnet Network'
    shell: azure network vnet subnet list {{ rgName }} {{ rgName }} | grep -w {{ subnetName}}
    register: check_subnet
    ignore_errors: yes

  - name: 'Create the Subnet Azure'
    shell: >
      azure network vnet subnet create --resource-group {{ rgName }} 
      --vnet-name {{ rgName }} --name {{ subnetName }} 
      --address-prefix {{ subnetPrefix }}
    when: check_subnet.rc != 0

  - name: 'is Create Public IP'
    shell: azure network public-ip list --resource-group {{ rgName }} > /tmp/ip_{{ rgName }}
    register: check_ip_public
    ignore_errors: yes
    
  - name: 'Create Public IP'
    shell: >
      if ! grep -w {{ item }} /tmp/ip_{{ rgName }}; then
      azure network public-ip create --resource-group {{ rgName }} 
      --name {{ item }} --location {{ location }} --allocation-method Static; 
      fi
    when: "hostvars[item]['public_ip'] is defined and hostvars[item]['public_ip']|bool"
    with_items: groups['test']

  - name: 'is Create Public IP Gateway'
    shell: azure network public-ip list --resource-group {{ rgName }} | grep -w GatewayIP
    register: check_ip_public_gateway
    ignore_errors: yes

  - name: 'Create Public IP Gateway'
    shell: azure network public-ip create --resource-group {{ rgName }} --name GatewayIP --location {{ location }} --allocation-method Dynamic
    when: check_ip_public_gateway.rc != 0

  - name: 'is Create Azure Storage'
    shell: azure storage account list --resource-group {{ rgName }} | grep -i {{ rgName }}
    register: check_storage
    ignore_errors: yes

  - name: 'Create Azure Storage'
    shell: >
      azure storage account create {{ rgName | lower }} 
      --resource-group {{ rgName }} --location {{ location }} --type LRS 
    when: check_storage.rc != 0

  - name: 'Register subnet-id'
    shell: >
      subnetId="$(azure network vnet subnet show --resource-group {{ rgName }} 
      --vnet-name {{ rgName }} --name {{ subnetName }}|grep Id)" 
      && subnetId=${subnetId#*/} && echo $subnetId
    register: subnetid

  - name: 'Set output subnet-id'
    set_fact:
     subnetid_key={{subnetid.stdout}}

  - name: 'is Create a NIC'
    shell: azure network nic list --resource-group {{ rgName }} > /tmp/nic_{{ rgName }}

  - name: 'Create a NIC'
    shell: >
      if ! grep -w {{ item }} /tmp/nic_{{ rgName }}; then 
      azure network nic create --name {{ item }} --resource-group {{ rgName }} 
      --location {{ location }} --private-ip-address {{ hostvars[item]['ansible_ssh_host'] }} 
      --subnet-id {{ subnetid_key }}; 
      fi
    when: "hostvars[item]['public_ip'] is defined and not hostvars[item]['public_ip']|bool"
    with_items: groups['test']

  - name: 'Create a NIC with public ip'
    shell: >
      if ! grep -w {{ item }} /tmp/nic_{{ rgName }}; then
      azure network nic create --name {{ item }} --resource-group {{ rgName }}
      --location {{ location }} --private-ip-address {{ hostvars[item]['ansible_ssh_host'] }}
      --subnet-id {{ subnetid_key }} --public-ip-name {{ item }}; 
      fi
    when: "hostvars[item]['public_ip'] is defined and hostvars[item]['public_ip']|bool"
    with_items: groups['test']

  - name: 'Is Create VM azure'
    shell: azure vm list --resource-group {{ rgName }} > /tmp/vm_{{ rgName }}

  - name: 'Create VM Azure :-P '
    shell: >
      if ! grep - Fx {{ item }} /tmp/vm_{{ rgName }}; then 
      azure vm create --vm-size {{ hostvars[item]['vmsize'] }} 
      --resource-group {{ rgName }} --name {{ item }} 
      --location {{ location }} --admin-username {{ username }} 
      --ssh-publickey-file {{ sshfile }} --storage-account-name {{ rgName | lower }} 
      --os-type {{ hostvars[item]['type_os'] }} --image-urn {{ hostvars[item]['image'] }} 
      --data-disk-size {{ hostvars[item]['disksize'] }} --subnet-id {{ subnetid_key }} 
      --nic-names {{ item }};
      fi
    with_items: groups['test']
