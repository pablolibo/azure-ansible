---
- hosts: localhost
  tasks:

  - name: 'Set subscription and ARM'
    shell: >
      azure config mode arm && azure account set "{{ subscription }}"
    register: set_sub_mode
    when: subscription is defined
    changed_when: set_sub_mode.rc != 0

  - name: 'was created Azure Resource?'
    shell: >
      azure group list | grep -w {{ rgName }}
    register: check_resource
    ignore_errors: yes
    changed_when: "check_resource.rc != 0"

  - name: 'Creating Azure Resource'
    shell: >
      azure group create {{ rgName }} {{ location }}
    when: check_resource.rc != 0

  - name: 'was created Azure Network?'
    shell: >
      azure network vnet list {{ rgName }} | grep -w {{ rgName }}
    register: check_network
    ignore_errors: yes
    changed_when: check_network.rc != 0

  - name: 'Creating the Azure Network'
    shell: >
      azure network vnet create 
      --resource-group {{ rgName }} 
      --name {{ rgName }} 
      --address-prefixes {{ vnetPrefix }} 
      --location {{ location }}
    when: check_network.rc != 0
    
  - name: 'was created the Azure Subnet Network'
    shell: >
      azure network vnet subnet list --resource-group {{ rgName }} --vnet-name {{ rgName }} > /tmp/subnet_{{ rgName }}
    register: check_subnet
    changed_when: check_subnet.rc != 0

  - name: 'Creating the Subnet Azure'
    shell: >
      if ! grep -w {{ item }} /tmp/subnet_{{ rgName }}; then
      azure network vnet subnet create 
      --resource-group {{ rgName }} 
      --vnet-name {{ rgName }} 
      --name {{ item }} 
      --address-prefix {{ hostvars[item]['network'] }};
      fi
    changed_when: False
    with_items: groups.subnet
    when: check_subnet.rc == 0

  - name: 'was Created Public IP'
    shell: >
      azure network public-ip list --resource-group {{ rgName }} > /tmp/ip_{{ rgName }}
    register: check_ip_public
    changed_when: check_ip_public.rc != 0
    
  - name: 'Creating Public IP'
    shell: >
      if ! grep -w {{ item }} /tmp/ip_{{ rgName }}; then
      azure network public-ip create 
      --resource-group {{ rgName }} 
      --name {{ item }} 
      --location {{ location }} 
      --allocation-method Static; 
      fi
    register: check_create_ip_public
    when: "hostvars[item]['public_ip'] is defined and hostvars[item]['public_ip']|bool"
    with_items: groups.vms
    changed_when: check_create_ip_public.rc != 0

  - name: 'was Created Public IP Gateway'
    shell: >
      azure network public-ip list --resource-group {{ rgName }} | grep -w GatewayIP
    register: check_ip_public_gateway
    ignore_errors: yes
    changed_when: check_ip_public.rc != 0
    
  - name: 'Creating Public IP Gateway'
    shell: >
      azure network public-ip create 
      --resource-group {{ rgName }} 
      --name GatewayIP 
      --location {{ location }} 
      --allocation-method Dynamic
    when: check_ip_public_gateway.rc != 0

  - name: 'was Created Azure Storage'
    shell: >
      azure storage account list --resource-group {{ rgName }} | grep -i {{ rgName }}
    register: check_storage
    ignore_errors: yes
    changed_when: check_storage.rc != 0

  - name: 'Creating Azure Storage'
    shell: >
      azure storage account create {{ rgName | lower }} 
      --resource-group {{ rgName }} 
      --location {{ location }} 
      --type LRS 
    when: check_storage.rc != 0

  - name: 'was Created a NIC'
    shell: >
      azure network nic list --resource-group {{ rgName }} > /tmp/nic_{{ rgName }}
    register: create_nic
    changed_when: create_nic.rc != 0
    
  - name: 'Creating a NIC'
    shell: >
      if ! grep -w {{ item }} /tmp/nic_{{ rgName }}; then 
      azure network nic create 
      --name {{ item }} 
      --resource-group {{ rgName }} 
      --location {{ location }} 
      --private-ip-address {{ hostvars[item]['ansible_host'] }} 
      --subnet-vnet-name {{ rgName }} 
      --subnet-name {{ hostvars[item]['subnet'] }};
      fi
    changed_when: False
    when: "hostvars[item]['public_ip'] is defined and not hostvars[item]['public_ip']|bool"
    with_items: groups.vms
        
  - name: 'Creating a NIC with public ip'
    shell: >
      if ! grep -w {{ item }} /tmp/nic_{{ rgName }}; then
      azure network nic create 
      --name {{ item }} 
      --resource-group {{ rgName }}
      --location {{ location }} 
      --private-ip-address {{ hostvars[item]['ansible_host'] }}
      --subnet-vnet-name {{ rgName }} 
      --subnet-name {{ hostvars[item]['subnet'] }} 
      --public-ip-name {{ item }}; 
      fi
    changed_when: False
    when: "hostvars[item]['public_ip'] is defined and hostvars[item]['public_ip']|bool"
    with_items: groups.vms

#  - debug: var=debug_nic
    
  - name: 'was Created VM azure'
    shell: azure vm list --resource-group {{ rgName }} > /tmp/vm_{{ rgName }}
    register: create_vm
    changed_when: create_vm.rc != 0

  - name: 'Creating VM Azure with second disk'
    shell: >
      if ! grep -w {{ item }} /tmp/vm_{{ rgName }}; then 
      azure vm create 
      --vm-size {{ hostvars[item]['vmsize'] }} 
      --resource-group {{ rgName }} 
      --name {{ item }} 
      --location {{ location }} 
      --admin-username {{ hostvars[item]['ansible_user'] }} 
      --ssh-publickey-file {{ hostvars[item]['sshfile'] }} 
      --storage-account-name {{ rgName | lower }} 
      --os-type {{ hostvars[item]['type_os'] }} 
      --image-urn {{ hostvars[item]['image'] }} 
      --data-disk-size {{ hostvars[item]['disksize'] }} 
      --nic-names {{ item }};
      fi
    changed_when: False
    with_items: groups.vms
    when: "{{ hostvars[item]['disksize'] }} > 0"

  - name: 'Creating VM Azure'
    shell: >
      if ! grep -w {{ item }} /tmp/vm_{{ rgName }}; then
      azure vm create 
      --vm-size {{ hostvars[item]['vmsize'] }} 
      --resource-group {{ rgName }} 
      --name {{ item }} 
      --location {{ location }} 
      --admin-username {{ hostvars[item]['ansible_user'] }} 
      --ssh-publickey-file {{ hostvars[item]['sshfile'] }} 
      --storage-account-name {{ rgName | lower }} 
      --os-type {{ hostvars[item]['type_os'] }} 
      --image-urn {{ hostvars[item]['image'] }} 
      --nic-names {{ item }}; 
      fi
    changed_when: False
    with_items: groups.vms
    when: "{{ hostvars[item]['disksize'] }} == 0"
    
  - name: 'was Created VPN-Gateway?'
    shell: >
      azure network vpn-gateway list --resource-group {{ rgName }} > /tmp/gateway_{{ rgName }}
    register: check_gateway
    changed_when: check_gateway.rc != 0
    when: VPN_type is defined
    
  - name: 'Creating a VPN-Gateway'
    shell: >
      if ! grep -w {{ rgName }} /tmp/gateway_{{ rgName }}; then
      azure network vpn-gateway create
      --resource-group {{ rgName }}
      --name {{ rgName }}
      --location {{ location }}
      --address-prefixes {{ vnetPrefix }}
      --sku-name Standard
      --public-ip-name GatewayIP
      --vnet-name {{ rgName }};
      fi
    register: check_gateway_created
    changed_when: check_gateway_created.rc != 0
    when: VPN_type is defined